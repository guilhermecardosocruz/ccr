
===== package.json =====
1 {
2   "name": "ccr",
3   "private": true,
4   "version": "0.1.0",
5   "type": "module",
6   "scripts": {
7     "dev": "next dev --turbo",
8     "build": "next build",
9     "start": "next start",
10     "typecheck": "tsc --noEmit"
11   },
12   "dependencies": {
13     "next": "15.0.0",
14     "react": "19.0.0",
15     "react-dom": "19.0.0"
16   },
17   "devDependencies": {
18     "@types/node": "^22.7.4",
19     "@types/react": "^19.0.0",
20     "autoprefixer": "^10.4.20",
21     "pg": "^8.16.3",
22     "postcss": "^8.4.47",
23     "tailwindcss": "^3.4.10",
24     "typescript": "^5.6.3"
25   }
26 }

===== app/layout.tsx =====
1 export const metadata = { title: "CCR • Placar", description: "Planilha interativa de pontuação" };
2 import "./../styles/globals.css";
3 import AppMenu from "@/components/AppMenu";
4 
5 export default function RootLayout({ children }: { children: React.ReactNode }) {
6   return (
7     <html lang="pt-BR">
8       <body>
9         <AppMenu />
10         {children}
11       </body>
12     </html>
13   );
14 }

===== app/page.tsx =====
1 "use client";
2 import { useEffect } from "react";
3 import { useRouter } from "next/navigation";
4 import { getSession } from "@/lib/session";
5 
6 export default function Home() {
7   const router = useRouter();
8   useEffect(()=>{
9     const s = getSession();
10     if (!s.authed) router.replace("/login");
11     else if (s.role==="admin") router.replace("/gestor");
12     else router.replace("/planilha");
13   },[router]);
14   return null;
15 }

===== app/(auth)/login/page.tsx =====
1 "use client";
2 
3 import { useEffect, useState } from "react";
4 import { adminConfigured, getAdminPins, setupAdminPin, sha256 } from "@/lib/pin";
5 import { getSession, setSession } from "@/lib/session";
6 import { useRouter } from "next/navigation";
7 import { matchPinAcrossEvents } from "@/lib/events";
8 
9 export default function LoginPage() {
10   const router = useRouter();
11   const [phase, setPhase] = useState<"setup-admin"|"login">("login");
12   const [adminPin, setAdminPin] = useState("");
13   const [pin, setPin] = useState("");
14   const [err, setErr] = useState("");
15 
16   useEffect(()=>{
17     const s = getSession();
18     if (s.authed && s.role) {
19       if (s.role==="admin") router.replace("/gestor");
20       else router.replace("/planilha");
21       return;
22     }
23     setPhase(adminConfigured() ? "login" : "setup-admin");
24   },[router]);
25 
26   async function onSetup(e: React.FormEvent) {
27     e.preventDefault(); setErr("");
28     if (!adminPin.trim()) { setErr("Informe um PIN mestre."); return; }
29     await setupAdminPin(adminPin);
30     setPhase("login"); alert("PIN mestre configurado.");
31   }
32 
33   async function onLogin(e: React.FormEvent) {
34     e.preventDefault(); setErr("");
35     const p = pin.trim(); if (!p) return;
36 
37     // 1) Admin?
38     const h = await sha256(p);
39     const admin = getAdminPins();
40     if (admin.adminHash && h === admin.adminHash) {
41       setSession({ authed:true, role:"admin", pin:p, eventId:null });
42       router.replace("/gestor"); return;
43     }
44 
45     // 2) Juiz/Coord por evento
46     const match = await matchPinAcrossEvents(p);
47     if (match) {
48       setSession({ authed:true, role:match.role, pin:p, eventId: match.eventId });
49       router.replace(match.role==="judge" ? "/planilha" : "/coordenacao"); return;
50     }
51 
52     setErr("PIN inválido.");
53   }
54 
55   return (
56     <main className="container-page">
57       <div className="max-w-md mx-auto card p-5">
58         <h1 className="text-xl font-semibold mb-4">{phase==="setup-admin" ? "Configurar PIN Mestre" : "Entrar com PIN"}</h1>
59 
60         {phase==="setup-admin" ? (
61           <form onSubmit={onSetup} className="space-y-3">
62             <div>
63               <label className="block text-sm mb-1">PIN Mestre (Gestor)</label>
64               <input value={adminPin} onChange={e=>setAdminPin(e.target.value)} className="w-full border rounded-md px-3 py-2" placeholder="Defina o PIN mestre" autoFocus />
65             </div>
66             {err && <p className="text-sm text-red-600">{err}</p>}
67             <div className="flex justify-end">
68               <button className="px-3 py-2 border rounded-md bg-gray-900 text-white">Salvar PIN Mestre</button>
69             </div>
70           </form>
71         ) : (
72           <form onSubmit={onLogin} className="space-y-3">
73             <div>
74               <label className="block text-sm mb-1">PIN</label>
75               <input value={pin} onChange={e=>setPin(e.target.value)} className="w-full border rounded-md px-3 py-2" placeholder="Digite PIN do evento ou PIN mestre" autoFocus />
76             </div>
77             {err && <p className="text-sm text-red-600">{err}</p>}
78             <div className="flex justify-end">
79               <button className="px-3 py-2 border rounded-md bg-gray-900 text-white">Entrar</button>
80             </div>
81             <div className="text-xs text-gray-500 mt-2">
82               Dica: PIN mestre leva ao Painel do Gestor; PIN de juiz/coord leva direto ao evento.
83             </div>
84           </form>
85         )}
86       </div>
87     </main>
88   );
89 }

===== app/gestor/page.tsx =====
1 "use client";
2 
3 import RouteGuard from "@/components/RouteGuard";
4 import { createEvent, listEvents, keyTeams, keyResults } from "@/lib/events";
5 import { useEffect, useState } from "react";
6 import { getSession, setSession } from "@/lib/session";
7 import { getEventPins, getEventPinsPlain, setEventPins } from "@/lib/pin";
8 import { saveJSON } from "@/lib/storage";
9 import Link from "next/link";
10 
11 function genNumeric(n:number){ return Array.from({length:n},()=>Math.floor(Math.random()*10)).join(""); }
12 function genAlphaNum(n:number){ const cs="ABCDEFGHJKLMNPQRSTUVWXYZ23456789"; let o=""; for(let i=0;i<n;i++) o+=cs[Math.floor(Math.random()*cs.length)]; return o; }
13 
14 function Modal({open,onClose,title,children}:{open:boolean;onClose:()=>void;title?:string;children:React.ReactNode}) {
15   if(!open) return null;
16   return (
17     <div className="fixed inset-0 bg-black/40 z-50 flex items-center justify-center">
18       <div className="bg-white rounded-xl shadow-xl border w-full max-w-md p-5">
19         <div className="flex items-center justify-between mb-3">
20           <h3 className="text-lg font-semibold">{title}</h3>
21           <button onClick={onClose} className="px-2 py-1 border rounded-md">Fechar</button>
22         </div>
23         {children}
24       </div>
25     </div>
26   );
27 }
28 
29 export default function GestorPage() {
30   return (
31     <RouteGuard need="admin">
32       <GestorInner />
33     </RouteGuard>
34   );
35 }
36 
37 function GestorInner() {
38   const [events, setEvents] = useState(listEvents());
39   const [name, setName] = useState("");
40 
41   const [showPinsOf, setShowPinsOf] = useState<string|null>(null); // eventId para modal
42 
43   useEffect(()=>{ setEvents(listEvents()); }, []);
44 
45   function addEvent() {
46     const n = name.trim(); if (!n) return;
47     const e = createEvent(n);
48     // gera PINs padrão
49     setEventPins(e.id, genNumeric(6), genAlphaNum(8));
50     setName(""); setEvents(listEvents());
51     setShowPinsOf(e.id); // já abre o modal com os PINs gerados
52   }
53 
54   function makeActive(id: string) {
55     const s = getSession();
56     setSession({ ...s, eventId: id });
57     alert("Evento ativo selecionado.");
58   }
59 
60   function rotatePins(id: string) {
61     setEventPins(id, genNumeric(6), genAlphaNum(8));
62     setShowPinsOf(id); // exibir os novos
63   }
64 
65   function resetData(id: string) {
66     if (!confirm("Limpar equipes e resultados deste evento?")) return;
67     saveJSON(keyTeams(id), []);
68     saveJSON(keyResults(id), []);
69     alert("Dados limpos.");
70   }
71 
72   function copy(txt: string) {
73     navigator.clipboard.writeText(txt).then(()=>alert("Copiado!"));
74   }
75 
76   return (
77     <main className="container-page space-y-6">
78       <header className="card p-4">
79         <h1 className="text-lg font-semibold mb-2">Painel do Gestor</h1>
80         <div className="flex gap-2">
81           <input value={name} onChange={e=>setName(e.target.value)} className="border rounded-md px-3 py-2 w-full" placeholder="Nome do evento" />
82           <button onClick={addEvent} className="px-3 py-2 border rounded-md">Criar evento</button>
83         </div>
84       </header>
85 
86       <section className="card p-0 overflow-hidden">
87         <table className="w-full text-sm">
88           <thead className="bg-gray-50">
89             <tr>
90               <th className="text-left px-3 py-2">Evento</th>
91               <th className="px-3 py-2">PIN Juiz</th>
92               <th className="px-3 py-2">PIN Coord</th>
93               <th className="px-3 py-2">Ações</th>
94             </tr>
95           </thead>
96           <tbody>
97             {events.length===0 ? (
98               <tr><td colSpan={4} className="px-3 py-6 text-center text-gray-500">Nenhum evento.</td></tr>
99             ) : events.map((e,i)=>{
100               const pins = getEventPins(e.id);
101               const jMask = pins.judgeHash ? "••••••" : "—";
102               const cMask = pins.coordHash ? "••••••••" : "—";
103               return (
104                 <tr key={e.id} className={i%2?"bg-white":"bg-gray-50/60"}>
105                   <td className="px-3 py-2">{e.name}</td>
106                   <td className="px-3 py-2">{jMask}</td>
107                   <td className="px-3 py-2">{cMask}</td>
108                   <td className="px-3 py-2 flex flex-wrap gap-2">
109                     <button onClick={()=>makeActive(e.id)} className="px-2 py-1 border rounded-md">Ativar evento</button>
110                     <Link href="/planilha" className="px-2 py-1 border rounded-md">Planilha</Link>
111                     <Link href="/equipes" className="px-2 py-1 border rounded-md">Equipes</Link>
112                     <Link href="/resultado" className="px-2 py-1 border rounded-md">Resultado</Link>
113                     <Link href="/coordenacao" className="px-2 py-1 border rounded-md">Coordenação</Link>
114                     <button onClick={()=>setShowPinsOf(e.id)} className="px-2 py-1 border rounded-md">Mostrar PINs</button>
115                     <button onClick={()=>rotatePins(e.id)} className="px-2 py-1 border rounded-md">Rotacionar PINs</button>
116                     <button onClick={()=>resetData(e.id)} className="px-2 py-1 border rounded-md">Limpar dados</button>
117                   </td>
118                 </tr>
119               );
120             })}
121           </tbody>
122         </table>
123       </section>
124 
125       {/* Modal para exibir PINs em texto */}
126       <Modal
127         open={!!showPinsOf}
128         onClose={()=>setShowPinsOf(null)}
129         title="PINs do evento"
130       >
131         {showPinsOf && (() => {
132           const p = getEventPinsPlain(showPinsOf);
133           return (
134             <div className="space-y-3">
135               <div className="flex items-center justify-between gap-3">
136                 <div>
137                   <div className="text-sm text-gray-600">PIN Juiz</div>
138                   <div className="text-xl font-semibold">{p.judgePin ?? "—"}</div>
139                 </div>
140                 {p.judgePin && <button onClick={()=>copy(p.judgePin!)} className="px-2 py-1 border rounded-md">Copiar</button>}
141               </div>
142               <div className="flex items-center justify-between gap-3">
143                 <div>
144                   <div className="text-sm text-gray-600">PIN Coordenação</div>
145                   <div className="text-xl font-semibold">{p.coordPin ?? "—"}</div>
146                 </div>
147                 {p.coordPin && <button onClick={()=>copy(p.coordPin!)} className="px-2 py-1 border rounded-md">Copiar</button>}
148               </div>
149               <p className="text-xs text-gray-500">Obs.: os PINs ficam salvos apenas neste dispositivo (localStorage). Ao “Rotacionar PINs”, novos valores são gerados e exibidos aqui.</p>
150             </div>
151           );
152         })()}
153       </Modal>
154     </main>
155   );
156 }

===== app/coordenacao/page.tsx =====
1 "use client";
2 
3 import RouteGuard from "@/components/RouteGuard";
4 import { useEffect, useMemo, useState } from "react";
5 import { getSession } from "@/lib/session";
6 import { keyResults, keyTeams } from "@/lib/events";
7 import { loadJSON, saveJSON } from "@/lib/storage";
8 import { Run, compute } from "@/lib/ranking";
9 
10 const mmss=(t:number)=>`${String(Math.floor(t/60)).padStart(2,"0")}:${String(t%60).padStart(2,"0")}`;
11 
12 export default function Page(){
13   return (
14     <RouteGuard need="coord" needEvent>
15       <Inner />
16     </RouteGuard>
17   );
18 }
19 
20 function Inner(){
21   const sess = getSession();
22   const RESULTS_KEY = keyResults(sess.eventId!);
23   const TEAMS_KEY   = keyTeams(sess.eventId!);
24 
25   // ---------- Equipes (CRUD) ----------
26   const [teams,setTeams]=useState<string[]>([]);
27   const [name,setName]=useState("");
28   const [edit,setEdit]=useState<number|null>(null);
29   const [val,setVal]=useState("");
30 
31   useEffect(()=>{ setTeams(loadJSON<string[]>(TEAMS_KEY,[])); },[TEAMS_KEY]);
32   useEffect(()=>{ saveJSON(TEAMS_KEY,teams); },[teams,TEAMS_KEY]);
33 
34   function addTeam(){ const n=name.trim(); if(!n || teams.includes(n)) return; setTeams([...teams,n]); setName(""); }
35   function rmTeam(i:number){ const cp=[...teams]; cp.splice(i,1); setTeams(cp); }
36   function startEdit(i:number){ setEdit(i); setVal(teams[i]); }
37   function saveEdit(){ if(edit===null) return; const v=val.trim(); if(!v) return; const cp=[...teams]; cp[edit]=v; setTeams(cp); setEdit(null); setVal(""); }
38 
39   // ---------- Resultados / Ranking ----------
40   const [runs,setRuns]=useState<Run[]>([]);
41   useEffect(()=>{ setRuns(loadJSON<Run[]>(RESULTS_KEY,[])); },[RESULTS_KEY]);
42 
43   const byTeam = useMemo(()=>{ const m=new Map<string,Run[]>(); for(const r of runs){ if(!m.has(r.team)) m.set(r.team,[]); m.get(r.team)!.push(r);} for(const a of m.values()) a.sort((x,y)=>x.at-y.at); return m;},[runs]);
44   const rows = useMemo(()=>compute(byTeam),[byTeam]);
45 
46   return (
47     <main className="container-page max-w-6xl mx-auto space-y-6">
48       <header className="flex items-center justify-between gap-4">
49         <div>
50           <h1 className="text-2xl md:text-3xl font-bold">Copa Criciúma de Robótica</h1>
51           <p className="text-sm text-gray-500">Coordenação — gerenciamento de equipes e visão completa (3 rodadas).</p>
52         </div>
53         <div className="h-12 w-12 md:h-14 md:w-14 rounded-lg border flex items-center justify-center text-xs text-gray-500 bg-white">LOGO</div>
54       </header>
55 
56       {/* ---------- Gestão de Equipes ---------- */}
57       <section className="card p-4 space-y-4">
58         <h2 className="text-sm font-semibold text-gray-600 uppercase tracking-wide">Equipes do evento</h2>
59         <div className="flex gap-2">
60           <input
61             value={name}
62             onChange={e=>setName(e.target.value)}
63             className="border rounded-md px-3 py-2 w-full"
64             placeholder="Nome da equipe"
65           />
66         <button onClick={addTeam} className="px-3 py-2 border rounded-md">Adicionar</button>
67         </div>
68 
69         <div className="overflow-x-auto">
70           <table className="w-full text-sm">
71             <thead className="bg-gray-50">
72               <tr><th className="text-left px-3 py-2">Equipe</th><th className="w-40 px-3 py-2">Ações</th></tr>
73             </thead>
74             <tbody>
75               {teams.length===0 ? (
76                 <tr><td colSpan={2} className="px-3 py-6 text-center text-gray-500">Nenhuma equipe cadastrada.</td></tr>
77               ) : teams.map((t,i)=>(
78                 <tr key={`${t}-${i}`} className={i%2?"bg-white":"bg-gray-50/60"}>
79                   <td className="px-3 py-2">
80                     {edit===i
81                       ? <input value={val} onChange={e=>setVal(e.target.value)} className="border rounded-md px-2 py-1 w-full" />
82                       : t}
83                   </td>
84                   <td className="px-3 py-2">
85                     {edit===i ? (
86                       <div className="flex gap-2">
87                         <button onClick={saveEdit} className="px-2 py-1 border rounded-md">Salvar</button>
88                         <button onClick={()=>{setEdit(null); setVal("");}} className="px-2 py-1 border rounded-md">Cancelar</button>
89                       </div>
90                     ) : (
91                       <div className="flex gap-2">
92                         <button onClick={()=>startEdit(i)} className="px-2 py-1 border rounded-md">Editar</button>
93                         <button onClick={()=>rmTeam(i)} className="px-2 py-1 border rounded-md">Excluir</button>
94                       </div>
95                     )}
96                   </td>
97                 </tr>
98               ))}
99             </tbody>
100           </table>
101         </div>
102       </section>
103 
104       {/* ---------- Ranking detalhado ---------- */}
105       <section className="card p-3 md:p-5">
106         <div className="overflow-x-auto">
107           <table className="min-w-full text-sm">
108             <thead>
109               <tr className="text-left">
110                 <th className="px-2 py-2">#</th>
111                 <th className="px-2 py-2">Equipe</th>
112                 <th className="px-2 py-2">Rod. 1</th>
113                 <th className="px-2 py-2">Rod. 2</th>
114                 <th className="px-2 py-2">Rod. 3</th>
115                 <th className="px-2 py-2">Ranking</th>
116                 <th className="px-2 py-2">Soma total</th>
117                 <th className="px-2 py-2">Tempo (considerado)</th>
118               </tr>
119             </thead>
120             <tbody>
121               {rows.length===0 ? (
122                 <tr><td colSpan={8} className="px-2 py-8 text-center text-gray-500">Sem rodadas salvas.</td></tr>
123               ) : rows.map((r,i)=>{
124                   const cells=[0,1,2].map(k=>{
125                     const run=r.runs[k]; if(!run) return <td key={k} className="px-2 py-2 text-gray-400">—</td>;
126                     const considered=r.pickedIdx.includes(k);
127                     return (
128                       <td key={k} className="px-2 py-2">
129                         <div className={`inline-flex flex-col rounded-md border px-2 py-1 ${considered?"bg-gray-50":"opacity-80"}`}>
130                           <span className="font-medium">{run.score.toFixed(2)}</span>
131                           <span className="text-[11px] text-gray-500">{mmss(run.timeSec)}</span>
132                         </div>
133                       </td>
134                     );
135                   });
136                   return (
137                     <tr key={r.team} className={i%2?"bg-white":"bg-gray-50/60"}>
138                       <td className="px-2 py-2 font-semibold">{i+1}</td>
139                       <td className="px-2 py-2">{r.team}</td>
140                       {cells}
141                       <td className="px-2 py-2 font-semibold">{r.rankingScore.toFixed(2)}</td>
142                       <td className="px-2 py-2">{r.tieTotal.toFixed(2)}</td>
143                       <td className="px-2 py-2">{mmss(r.tieTime)}</td>
144                     </tr>
145                   );
146                 })}
147             </tbody>
148           </table>
149         </div>
150       </section>
151     </main>
152   );
153 }

===== app/equipes/page.tsx =====
1 "use client";
2 
3 import RouteGuard from "@/components/RouteGuard";
4 import { useEffect, useState } from "react";
5 import { getSession } from "@/lib/session";
6 import { keyTeams } from "@/lib/events";
7 import { loadJSON, saveJSON } from "@/lib/storage";
8 
9 export default function Page(){
10   return (
11     <RouteGuard need="coord" needEvent>
12       <Inner />
13     </RouteGuard>
14   );
15 }
16 
17 function Inner(){
18   const sess = getSession();
19   const TEAMS_KEY = keyTeams(sess.eventId!);
20 
21   const [teams,setTeams]=useState<string[]>([]);
22   const [name,setName]=useState("");
23   const [edit,setEdit]=useState<number|null>(null);
24   const [val,setVal]=useState("");
25 
26   useEffect(()=>{ setTeams(loadJSON<string[]>(TEAMS_KEY,[])); },[TEAMS_KEY]);
27   useEffect(()=>{ saveJSON(TEAMS_KEY,teams); },[teams,TEAMS_KEY]);
28 
29   function add(){ const n=name.trim(); if(!n||teams.includes(n)) return; setTeams([...teams,n]); setName(""); }
30   function rm(i:number){ const cp=[...teams]; cp.splice(i,1); setTeams(cp); }
31   function start(i:number){ setEdit(i); setVal(teams[i]); }
32   function save(){ if(edit===null) return; const v=val.trim(); if(!v) return; const cp=[...teams]; cp[edit]=v; setTeams(cp); setEdit(null); setVal(""); }
33 
34   return (
35     <main className="container-page space-y-6">
36       <header className="card p-4">
37         <h1 className="text-lg font-semibold mb-2">Equipes</h1>
38         <div className="flex gap-2">
39           <input value={name} onChange={e=>setName(e.target.value)} className="border rounded-md px-3 py-2 w-full" placeholder="Nome da equipe" />
40           <button onClick={add} className="px-3 py-2 border rounded-md">Adicionar</button>
41         </div>
42       </header>
43       <section className="card p-0 overflow-hidden">
44         <table className="w-full text-sm">
45           <thead className="bg-gray-50"><tr><th className="text-left px-3 py-2">Equipe</th><th className="w-40 px-3 py-2">Ações</th></tr></thead>
46           <tbody>
47             {teams.length===0 ? <tr><td colSpan={2} className="px-3 py-6 text-center text-gray-500">Nenhuma equipe.</td></tr> :
48             teams.map((t,i)=>(
49               <tr key={t} className={i%2?"bg-white":"bg-gray-50/60"}>
50                 <td className="px-3 py-2">{edit===i? <input value={val} onChange={e=>setVal(e.target.value)} className="border rounded-md px-2 py-1 w-full" /> : t}</td>
51                 <td className="px-3 py-2 flex gap-2">{edit===i ? (<><button onClick={save} className="px-2 py-1 border rounded-md">Salvar</button><button onClick={()=>{setEdit(null);setVal("");}} className="px-2 py-1 border rounded-md">Cancelar</button></>) : (<><button onClick={()=>start(i)} className="px-2 py-1 border rounded-md">Editar</button><button onClick={()=>rm(i)} className="px-2 py-1 border rounded-md">Excluir</button></>)}</td>
52               </tr>
53             ))}
54           </tbody>
55         </table>
56       </section>
57     </main>
58   );
59 }

===== app/planilha/page.tsx =====
1 "use client";
2 
3 import RouteGuard from "@/components/RouteGuard";
4 import { useEffect, useMemo, useState } from "react";
5 import { getSession } from "@/lib/session";
6 import { keyTeams, keyResults } from "@/lib/events";
7 import { loadJSON, saveJSON } from "@/lib/storage";
8 
9 /** Config */
10 type DKey = "lombadas"|"gap"|"obstaculo"|"intercepcao"|"chegada"|"fato";
11 type Attempt = 1|2|3;
12 const DESAFIOS: Record<DKey,{title:string;points:number;rows:number}> = {
13   lombadas:{title:"Lombadas (15)",points:15,rows:5},
14   gap:{title:"Gap (15)",points:15,rows:5},
15   obstaculo:{title:"Obstáculo (20)",points:20,rows:5},
16   intercepcao:{title:"Intercepção (20)",points:20,rows:5},
17   chegada:{title:"Chegada (20)",points:20,rows:5},
18   fato:{title:"Fato Histórico (50)",points:50,rows:5},
19 };
20 const MARC: Record<Attempt,number> = {1:100,2:75,3:50};
21 const MINA: Record<Attempt,number> = {1:1.5,2:1.25,3:1.15};
22 const makeState = () => Object.fromEntries(Object.entries(DESAFIOS).map(([k,v])=>[k,Array(v.rows).fill(false)])) as Record<DKey,boolean[]>;
23 const mmss = (t:number)=>`${String(Math.floor(t/60)).padStart(2,"0")}:${String(t%60).padStart(2,"0")}`;
24 
25 export default function Page() {
26   return (
27     <RouteGuard need="judge" needEvent>
28       <Planilha />
29     </RouteGuard>
30   );
31 }
32 
33 function Planilha(){
34   const sess = getSession();
35   const TEAMS_KEY   = keyTeams(sess.eventId!);
36   const RESULTS_KEY = keyResults(sess.eventId!);
37 
38   /** Equipes */
39   const [teams,setTeams]=useState<string[]>([]);
40   const [selected,setSelected]=useState("");
41   // carga inicial
42   useEffect(()=>{ setTeams(loadJSON<string[]>(TEAMS_KEY,[])); },[TEAMS_KEY]);
43   // escuta alterações do localStorage vindas de OUTRA aba (mesmo domínio)
44   useEffect(()=>{
45     function onStorage(e: StorageEvent){
46       if (e.key === TEAMS_KEY) {
47         setTeams(loadJSON<string[]>(TEAMS_KEY,[]));
48       }
49     }
50     window.addEventListener("storage", onStorage);
51     return ()=>window.removeEventListener("storage", onStorage);
52   },[TEAMS_KEY]);
53 
54   /** Cronômetro */
55   const [durationMin,setDurationMin]=useState(5);
56   const [timeLeft,setTimeLeft]=useState(durationMin*60);
57   const [running,setRunning]=useState(false);
58   useEffect(()=>{ if(!running) setTimeLeft(durationMin*60); },[durationMin,running]);
59   useEffect(()=>{ if(!running) return; const id=setInterval(()=>setTimeLeft(t=>t>0?t-1:0),1000); return ()=>clearInterval(id); },[running]);
60 
61   const canStart = !!selected || running;
62   const startPause = ()=>{ if(!selected) return; if(timeLeft<=0) setTimeLeft(durationMin*60); setRunning(r=>!r); };
63   const penalty = ()=> running && selected && setTimeLeft(t=>Math.max(0,t-60));
64 
65   /** Placar */
66   const [tab,setTab]=useState(makeState());
67   const [mark,setMark]=useState<Record<Attempt,0|1|2>>({1:0,2:0,3:0});
68   const [mina,setMina]=useState<0|Attempt>(0);
69   const canScore = Boolean(selected)&&running&&timeLeft>0;
70 
71   const toggle=(d:DKey,i:number)=>{ if(!canScore) return; setTab(p=>{const n={...p}; n[d]=[...n[d]]; n[d][i]=!n[d][i]; return n;}); };
72   const pick=(t:Attempt,q:0|1|2)=>{ if(!canScore) return; setMark(p=>({...p,[t]:p[t]===q?0:q})); };
73 
74   const somaCol:Record<DKey,number> = useMemo(()=>{ const r:any={}; (Object.keys(DESAFIOS) as DKey[]).forEach(k=>r[k]=tab[k].reduce((a,on)=>a+(on?DESAFIOS[k].points:0),0)); return r; },[tab]);
75   const somaDes = (Object.keys(DESAFIOS) as DKey[]).reduce((a,k)=>a+somaCol[k],0);
76   const somaMar = ([1,2,3] as Attempt[]).reduce((a,t)=>a+(mark[t]?MARC[t]:0),0);
77   const mult = mina===0?1:MINA[mina];
78   const total = Number(((somaDes+somaMar)*mult).toFixed(2));
79 
80   function resetAll(){ setTab(makeState()); setMark({1:0,2:0,3:0}); setMina(0); setRunning(false); setTimeLeft(durationMin*60); setSelected(""); }
81 
82   /** salvar rodada (máx 3 por equipe; salva tempo pausado) */
83   function saveRound(){
84     if(!selected){ alert("Selecione uma equipe."); return; }
85     const arr = loadJSON<any[]>(RESULTS_KEY,[]);
86     const count = arr.filter(r=>r.team===selected).length;
87     if(count>=3){ alert("Esta equipe já possui 3 resultados."); return; }
88     const elapsed = durationMin*60 - timeLeft;
89     const payload = { team:selected, score: total, timeSec: Math.max(0,elapsed), at: Date.now() };
90     arr.push(payload); saveJSON(RESULTS_KEY, arr);
91     alert(`Rodada salva!\nEquipe: ${selected}\nPontuação: ${total}\nTempo: ${mmss(payload.timeSec)}`);
92   }
93 
94   const cellCls=(on:boolean)=>`cell-btn ${on?"is-on":"is-off"} ${canScore?"":"opacity-50 cursor-not-allowed"}`;
95   const maxRows = Math.max(...Object.values(DESAFIOS).map(v=>v.rows));
96 
97   return (
98     <main className="container-page space-y-6">
99       <header className="card p-3 md:p-5">
100         <div className="flex flex-col md:flex-row md:items-center justify-between gap-3">
101           <div className="flex items-center gap-3">
102             <label className="text-sm text-gray-600">EQUIPE:</label>
103             <select className="px-3 py-1.5 border rounded-md bg-white" value={selected} onChange={e=>setSelected(e.target.value)}>
104               <option value="">Selecione</option>
105               {teams.map(t=><option key={t}>{t}</option>)}
106             </select>
107           </div>
108 
109           <div className="flex flex-wrap items-center gap-3">
110             <select className="px-2 py-1.5 border rounded-md bg-white" value={durationMin} onChange={e=>setDurationMin(Number(e.target.value))} disabled={running} title={running?"Pause para alterar":"Selecione a duração"}>
111               {[2,3,4,5,6,7,8,9,10].map(m=><option key={m}>{m}</option>)}
112             </select>
113             <div className="text-3xl font-mono">{mmss(timeLeft)}</div>
114             <button onClick={startPause} className={`px-3 py-2 border rounded-md ${!canStart?"opacity-50 cursor-not-allowed":""}`} disabled={!canStart}>{running?"Pausar": timeLeft<=0?"Reiniciar":"Iniciar"}</button>
115             <button onClick={penalty} disabled={!running||timeLeft<=0||!selected} className={`px-3 py-2 border rounded-md ${running&&timeLeft>0&&selected?"hover:bg-gray-50":"opacity-50 cursor-not-allowed"}`}>Penalidade -1:00</button>
116             <button onClick={resetAll} className="px-3 py-2 border rounded-md">Zerar</button>
117             <button onClick={saveRound} className="px-3 py-2 border rounded-md bg-gray-900 text-white">Salvar resultado</button>
118           </div>
119         </div>
120         {!selected ? (
121           <p className="mt-3 text-xs text-red-600">Selecione uma equipe para iniciar o tempo e liberar a pontuação.</p>
122         ) : (
123           <p className="mt-3 text-xs text-gray-500">Pontuações só podem ser marcadas com o cronômetro em andamento.</p>
124         )}
125       </header>
126 
127       {/* Desafios */}
128       <section className="card p-3 md:p-5">
129         <h2 className="mb-3 grid-head">DESAFIOS DE PISTA</h2>
130         <div className="sheet">
131           <table>
132             <thead><tr><th className="w-28"></th>{(Object.keys(DESAFIOS) as DKey[]).map(k=><th key={k}>{DESAFIOS[k].title}</th>)}<th className="w-28">SOMA</th></tr></thead>
133             <tbody>
134               {Array.from({length:maxRows}).map((_,r)=>(
135                 <tr key={r}>
136                   <td></td>
137                   {(Object.keys(DESAFIOS) as DKey[]).map(k=>{
138                     const cfg=DESAFIOS[k]; const exists=r<cfg.rows; const on=exists?tab[k][r]:false;
139                     return <td key={k+r}>{exists? <button className={cellCls(on)} onClick={()=>toggle(k,r)} disabled={!canScore} title={`${cfg.points} pontos`}>{on?cfg.points:""}</button>: <div className="cell-btn" />}</td>;
140                   })}
141                   <td><div className="cell-btn" /></td>
142                 </tr>
143               ))}
144             </tbody>
145             <tfoot><tr><th>SOMA</th>{(Object.keys(DESAFIOS) as DKey[]).map(k=><td key={"s"+k} className="summary">{somaCol[k]}</td>)}<td className="summary">{somaDes}</td></tr></tfoot>
146           </table>
147         </div>
148       </section>
149 
150       {/* Marcadores */}
151       <section className="card p-3 md:p-5">
152         <h2 className="mb-3 grid-head">MARCADORES</h2>
153         <div className="sheet">
154           <table>
155             <thead><tr><th>Marcador</th><th>Tentativa 1 (100)</th><th>Tentativa 2 (75)</th><th>Tentativa 3 (50)</th><th>SOMA</th></tr></thead>
156             <tbody>
157               {[1,2].map(m=>(
158                 <tr key={"m"+m}>
159                   <td className="font-medium">{`Marcador ${m}`}</td>
160                   {[1,2,3].map(t=>{
161                     const ativo = (mark[t as Attempt]===m);
162                     return (
163                       <td key={`m${m}t${t}`}>
164                         <button className={`cell-btn ${ativo?"is-on":"is-off"} ${canScore?"":"opacity-50 cursor-not-allowed"}`} onClick={()=>pick(t as Attempt, ativo?0:m)}>
165                           {ativo?MARC[t as 1|2|3]:""}
166                         </button>
167                       </td>
168                     );
169                   })}
170                   <td><div className="cell-btn"></div></td>
171                 </tr>
172               ))}
173             </tbody>
174             <tfoot><tr><th>SOMA</th><td className="summary">{mark[1]?100:0}</td><td className="summary">{mark[2]?75:0}</td><td className="summary">{mark[3]?50:0}</td><td className="summary">{([1,2,3] as Attempt[]).reduce((a,t)=>a+(mark[t]?MARC[t]:0),0)}</td></tr></tfoot>
175           </table>
176         </div>
177       </section>
178 
179       {/* Mina */}
180       <section className="card p-3 md:p-5">
181         <h2 className="mb-3 grid-head">MINA</h2>
182         <div className="sheet">
183           <table>
184             <thead><tr><th>Mina</th><th>Tentativa 1 (1,5x)</th><th>Tentativa 2 (1,25x)</th><th>Tentativa 3 (1,15x)</th><th>Multiplicador</th></tr></thead>
185             <tbody>
186               <tr>
187                 <td className="font-medium">Mina</td>
188                 {[1,2,3].map(t=>{
189                   const ativo = (mina===t);
190                   return <td key={`mina${t}`}><button className={`cell-btn ${ativo?"is-on":"is-off"}`} onClick={()=>setMina(ativo?0:t as 1|2|3)}>{MINA[t as 1|2|3]}</button></td>;
191                 })}
192                 <td className="summary">× {mult}</td>
193               </tr>
194             </tbody>
195           </table>
196         </div>
197       </section>
198 
199       {/* Nota Final */}
200       <section className="card p-3 md:p-5">
201         <h2 className="mb-3 grid-head">Nota final (Obstáculos + Marcadores) × Mina</h2>
202         <div className="sheet">
203           <table>
204             <thead><tr><th>DESAFIOS DE PISTA</th><th>MARCADORES</th><th>MINA</th><th>RESULTADO FINAL</th></tr></thead>
205             <tbody><tr><td className="summary">{somaDes}</td><td className="summary">{somaMar}</td><td className="summary">{mult}</td><td className="summary">{total}</td></tr></tbody>
206           </table>
207         </div>
208       </section>
209     </main>
210   );
211 }

===== app/ranking-coordenacao/page.tsx =====
1 "use client";
2 
3 import { useEffect, useMemo, useState } from "react";
4 
5 type Run = { team: string; score: number; timeSec: number; at: number };
6 
7 function mmss(total: number) {
8   const m = Math.floor(total / 60);
9   const s = total % 60;
10   return `${String(m).padStart(2, "0")}:${String(s).padStart(2, "0")}`;
11 }
12 
13 export default function RankingCoordenacaoPage() {
14   const [runs, setRuns] = useState<Run[]>([]);
15 
16   useEffect(() => {
17     const raw = localStorage.getItem("ccr-results");
18     setRuns(raw ? JSON.parse(raw) : []);
19   }, []);
20 
21   // Agrupa por equipe
22   const byTeam = useMemo(() => {
23     const map = new Map<string, Run[]>();
24     for (const r of runs) {
25       if (!map.has(r.team)) map.set(r.team, []);
26       map.get(r.team)!.push(r);
27     }
28     for (const arr of map.values()) arr.sort((a, b) => a.at - b.at);
29     return map;
30   }, [runs]);
31 
32   // Calcula ranking completo com 3 rodadas + desempates
33   const rows = useMemo(() => {
34     const out: Array<{
35       team: string;
36       runs: Run[];
37       rankingScore: number;
38       tieTotal: number;
39       tieTime: number;
40       pickedIdx: number[];
41     }> = [];
42 
43     byTeam.forEach((arr, team) => {
44       const scores = arr.map((r) => r.score);
45       const times = arr.map((r) => r.timeSec);
46       const idx = scores.map((s, i) => i).sort((a, b) => scores[b] - scores[a]);
47 
48       const picked = idx.slice(0, Math.min(2, arr.length));
49       const rankingScore = picked.reduce((acc, i) => acc + scores[i], 0);
50       const tieTotal = scores.reduce((a, b) => a + b, 0);
51       const tieTime = picked.reduce((acc, i) => acc + times[i], 0);
52 
53       out.push({
54         team,
55         runs: arr,
56         rankingScore,
57         tieTotal,
58         tieTime,
59         pickedIdx: picked.sort((a, b) => a - b),
60       });
61     });
62 
63     out.sort((a, b) => {
64       if (b.rankingScore !== a.rankingScore) return b.rankingScore - a.rankingScore;
65       if (b.tieTotal !== a.tieTotal) return b.tieTotal - a.tieTotal;
66       if (a.tieTime !== b.tieTime) return a.tieTime - b.tieTime;
67       return a.team.localeCompare(b.team, "pt-BR");
68     });
69 
70     return out;
71   }, [byTeam]);
72 
73   return (
74     <main className="container-page max-w-6xl mx-auto space-y-6">
75       <header className="flex items-center justify-between gap-4">
76         <div>
77           <h1 className="text-2xl md:text-3xl font-bold">Copa Criciúma de Robótica</h1>
78           <p className="text-sm text-gray-500">
79             Ranking Coordenação — melhor de 3 (corta a menor), desempates: soma total → menor tempo.
80           </p>
81         </div>
82         <div className="h-12 w-12 md:h-14 md:w-14 rounded-lg border flex items-center justify-center text-xs text-gray-500 bg-white">
83           LOGO
84         </div>
85       </header>
86 
87       <section className="card p-3 md:p-5">
88         <div className="overflow-x-auto">
89           <table className="min-w-full text-sm">
90             <thead>
91               <tr className="text-left">
92                 <th className="px-2 py-2">#</th>
93                 <th className="px-2 py-2">Equipe</th>
94                 <th className="px-2 py-2">Rod. 1</th>
95                 <th className="px-2 py-2">Rod. 2</th>
96                 <th className="px-2 py-2">Rod. 3</th>
97                 <th className="px-2 py-2">Ranking (2 melhores)</th>
98                 <th className="px-2 py-2">Soma total</th>
99                 <th className="px-2 py-2">Tempo (considerado)</th>
100               </tr>
101             </thead>
102             <tbody>
103               {rows.length === 0 ? (
104                 <tr>
105                   <td colSpan={8} className="px-2 py-8 text-center text-gray-500">
106                     Sem rodadas salvas ainda. Volte à planilha e use “Salvar rodada (resultado)”.
107                   </td>
108                 </tr>
109               ) : (
110                 rows.map((r, i) => {
111                   const cells = [0, 1, 2].map((k) => {
112                     const run = r.runs[k];
113                     if (!run) return <td key={k} className="px-2 py-2 text-gray-400">—</td>;
114                     const considered = r.pickedIdx.includes(k);
115                     return (
116                       <td key={k} className="px-2 py-2">
117                         <div className={`inline-flex flex-col rounded-md border px-2 py-1 ${considered ? "bg-gray-50" : "opacity-80"}`}>
118                           <span className="font-medium">{run.score.toFixed(2)}</span>
119                           <span className="text-[11px] text-gray-500">{mmss(run.timeSec)}</span>
120                         </div>
121                       </td>
122                     );
123                   });
124                   return (
125                     <tr key={r.team} className={i % 2 ? "bg-white" : "bg-gray-50/60"}>
126                       <td className="px-2 py-2 font-semibold">{i + 1}</td>
127                       <td className="px-2 py-2">{r.team}</td>
128                       {cells}
129                       <td className="px-2 py-2 font-semibold">{r.rankingScore.toFixed(2)}</td>
130                       <td className="px-2 py-2">{r.tieTotal.toFixed(2)}</td>
131                       <td className="px-2 py-2">{mmss(r.tieTime)}</td>
132                     </tr>
133                   );
134                 })
135               )}
136             </tbody>
137           </table>
138         </div>
139       </section>
140 
141       <section className="flex items-center gap-3">
142         <button
143           className="px-3 py-2 rounded-md border"
144           onClick={() => {
145             if (!confirm("Limpar SOMENTE os resultados salvos? (não afeta equipes)")) return;
146             localStorage.removeItem("ccr-results");
147             location.reload();
148           }}
149         >
150           Limpar resultados
151         </button>
152       </section>
153     </main>
154   );
155 }

===== app/resultado/page.tsx =====
1 "use client";
2 
3 import { useEffect, useMemo, useState } from "react";
4 import { getSession } from "@/lib/session";
5 import { keyResults } from "@/lib/events";
6 import { loadJSON } from "@/lib/storage";
7 import { Run, compute } from "@/lib/ranking";
8 
9 const mmss=(t:number)=>`${String(Math.floor(t/60)).padStart(2,"0")}:${String(t%60).padStart(2,"0")}`;
10 
11 export default function ResultadoPage(){
12   const sess = getSession();
13   const RESULTS_KEY = sess.eventId ? keyResults(sess.eventId) : ""; // público pode não ter sessão admin; então usamos última escolhida no device
14   const [runs,setRuns]=useState<Run[]>([]);
15   useEffect(()=>{ if(!RESULTS_KEY) return; setRuns(loadJSON<Run[]>(RESULTS_KEY,[])); },[RESULTS_KEY]);
16 
17   const byTeam = useMemo(()=>{ const m=new Map<string,Run[]>(); for(const r of runs){ if(!m.has(r.team)) m.set(r.team,[]); m.get(r.team)!.push(r);} for(const a of m.values()) a.sort((x,y)=>x.at-y.at); return m;},[runs]);
18   const rows = useMemo(()=>compute(byTeam),[byTeam]);
19 
20   return (
21     <main className="container-page max-w-4xl mx-auto space-y-6">
22       <header className="flex items-center justify-between gap-4">
23         <div><h1 className="text-2xl md:text-3xl font-bold">Copa Criciúma de Robótica</h1><p className="text-sm text-gray-500">Ranking — 2 melhores; desempate por soma total e menor tempo.</p></div>
24         <div className="h-12 w-12 md:h-14 md:w-14 rounded-lg border flex items-center justify-center text-xs text-gray-500 bg-white">LOGO</div>
25       </header>
26       <section className="card p-3 md:p-5">
27         <div className="overflow-x-auto">
28           <table className="min-w-full text-sm">
29             <thead><tr className="text-left"><th className="px-2 py-2">#</th><th className="px-2 py-2">Equipe</th><th className="px-2 py-2">Ranking (2 melhores)</th><th className="px-2 py-2">Tempo (2 melhores)</th></tr></thead>
30             <tbody>
31               {rows.length===0 ? <tr><td colSpan={4} className="px-2 py-8 text-center text-gray-500">Sem rodadas salvas.</td></tr> :
32                rows.map((r,i)=>(
33                 <tr key={r.team} className={i%2?"bg-white":"bg-gray-50/60"}>
34                   <td className="px-2 py-2 font-semibold">{i+1}</td>
35                   <td className="px-2 py-2">{r.team}</td>
36                   <td className="px-2 py-2 font-semibold">{r.rankingScore.toFixed(2)}</td>
37                   <td className="px-2 py-2">{mmss(r.tieTime)}</td>
38                 </tr>
39                ))}
40             </tbody>
41           </table>
42         </div>
43       </section>
44     </main>
45   );
46 }

===== components/AppMenu.tsx =====
1 "use client";
2 
3 import Link from "next/link";
4 import { useEffect, useState } from "react";
5 import { clearSession, getSession } from "@/lib/session";
6 import { useRouter, usePathname } from "next/navigation";
7 import { listEvents, findEvent } from "@/lib/events";
8 
9 export default function AppMenu() {
10   const router = useRouter();
11   const pathname = usePathname();
12   const [ready, setReady] = useState(false);
13   const [role, setRole] = useState<"admin"|"judge"|"coord"|null>(null);
14   const [eventId, setEventId] = useState<string|null>(null);
15   const [eventName, setEventName] = useState<string>("");
16 
17   useEffect(()=>{
18     const s = getSession();
19     setRole(s.role); setEventId(s.eventId); setReady(true);
20     if (s.eventId) {
21       const e = findEvent(s.eventId);
22       setEventName(e?.name || "");
23     }
24   }, []);
25 
26   // markup estável enquanto carrega (evita hydration mismatch)
27   return (
28     <nav className="w-full border-b bg-white">
29       <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between gap-4">
30         <div className="font-semibold">CCR • Placar</div>
31         {!ready ? (
32           <div className="h-6 w-40 rounded bg-gray-200 animate-pulse" />
33         ) : role ? (
34           <div className="flex items-center gap-4 text-sm">
35             {role==="admin" ? (
36               <>
37                 <Link href="/gestor" className="hover:underline">Gestor</Link>
38                 {!!eventId && (
39                   <>
40                     <span className="text-gray-500 truncate max-w-[14rem]" title={eventName || eventId}>Evento: {eventName || eventId}</span>
41                     <Link href="/planilha" className="hover:underline">Planilha</Link>
42                     <Link href="/equipes" className="hover:underline">Equipes</Link>
43                     <Link href="/resultado" className="hover:underline">Resultado</Link>
44                     <Link href="/coordenacao" className="hover:underline">Coordenação</Link>
45                   </>
46                 )}
47               </>
48             ) : (
49               <>
50                 <Link href="/planilha" className="hover:underline">Planilha</Link>
51                 <Link href="/equipes" className="hover:underline">Equipes</Link>
52                 <Link href="/resultado" className="hover:underline">Resultado</Link>
53                 <Link href="/coordenacao" className="hover:underline">Coordenação</Link>
54               </>
55             )}
56             {pathname!=="/login" && (
57               <button onClick={()=>{ clearSession(); router.push("/login"); }} className="px-2 py-1 border rounded-md">Sair</button>
58             )}
59           </div>
60         ) : (
61           <div className="text-sm">
62             {pathname!=="/login" && <Link href="/login" className="underline">Entrar</Link>}
63           </div>
64         )}
65       </div>
66     </nav>
67   );
68 }

===== components/RouteGuard.tsx =====
1 "use client";
2 
3 import { useEffect, useState } from "react";
4 import { getSession } from "@/lib/session";
5 import { useRouter } from "next/navigation";
6 
7 export default function RouteGuard({ need, needEvent = false, children }:{
8   need: "any"|"admin"|"judge"|"coord",
9   needEvent?: boolean,
10   children: React.ReactNode
11 }) {
12   const router = useRouter();
13   const [ok, setOk] = useState(false);
14 
15   useEffect(()=>{
16     const s = getSession();
17     if (!s.authed || !s.role) { router.replace("/login"); return; }
18     if (need !== "any" && s.role !== need) {
19       if (s.role === "admin") router.replace("/gestor"); else router.replace("/planilha");
20       return;
21     }
22     if (needEvent && !s.eventId) { router.replace("/gestor"); return; }
23     setOk(true);
24   }, [router, need, needEvent]);
25 
26   if (!ok) return null;
27   return <>{children}</>;
28 }

===== lib/session.ts =====
1 import { loadJSON, saveJSON, removeKey } from "./storage";
2 
3 export type Role = "admin"|"judge"|"coord";
4 export type Session = {
5   authed: boolean;
6   role: Role|null;
7   pin: string|null;       // PIN digitado (admin ou do evento)
8   eventId: string|null;   // evento ativo (admin pode alternar)
9 };
10 const KEY = "ccr-session";
11 
12 export function getSession(): Session {
13   return loadJSON<Session>(KEY, { authed:false, role:null, pin:null, eventId:null });
14 }
15 export function setSession(s: Session) { saveJSON(KEY, s); }
16 export function clearSession() { removeKey(KEY); }
17 export function requireEventId(): string|null {
18   const s = getSession(); return s.eventId;
19 }

===== lib/storage.ts =====
1 export function loadJSON<T>(key: string, fallback: T): T {
2   if (typeof window === "undefined") return fallback;
3   try { const raw = localStorage.getItem(key); return raw ? JSON.parse(raw) as T : fallback; }
4   catch { return fallback; }
5 }
6 export function saveJSON<T>(key: string, value: T) {
7   if (typeof window === "undefined") return;
8   localStorage.setItem(key, JSON.stringify(value));
9 }
10 export function removeKey(key: string) {
11   if (typeof window === "undefined") return;
12   localStorage.removeItem(key);
13 }

===== lib/pin.ts =====
1 import { loadJSON, saveJSON } from "./storage";
2 
3 export async function sha256(text: string): Promise<string> {
4   const enc = new TextEncoder().encode(text);
5   const buf = await crypto.subtle.digest("SHA-256", enc);
6   return Array.from(new Uint8Array(buf)).map(b=>b.toString(16).padStart(2,"0")).join("");
7 }
8 
9 /** PINs globais do gestor */
10 const ADMIN_KEY = "ccr-admin-pins"; // { adminHash }
11 export type AdminPins = { adminHash: string|null };
12 export function getAdminPins(): AdminPins {
13   return loadJSON<AdminPins>(ADMIN_KEY, { adminHash: null });
14 }
15 export function adminConfigured(): boolean {
16   return !!getAdminPins().adminHash;
17 }
18 export async function setupAdminPin(adminPin: string) {
19   const adminHash = await sha256(adminPin.trim());
20   saveJSON(ADMIN_KEY, { adminHash });
21 }
22 
23 /** PINs por evento */
24 export type EventPins = { judgeHash: string|null; coordHash: string|null };
25 export function getEventPins(eventId: string): EventPins {
26   return loadJSON<EventPins>(`ccr-evt:${eventId}:pins`, { judgeHash: null, coordHash: null });
27 }
28 export async function setEventPins(eventId: string, judgePin: string, coordPin: string) {
29   const judgeHash = await sha256(judgePin.trim());
30   const coordHash = await sha256(coordPin.trim());
31   saveJSON(`ccr-evt:${eventId}:pins`, { judgeHash, coordHash });
32   // Guardar também em texto para mostrar no modal (somente no dispositivo atual)
33   saveJSON(`ccr-evt:${eventId}:pins-plain`, { judgePin, coordPin });
34 }
35 
36 /** Somente para ler os PINs em texto (UI do gestor) */
37 export function getEventPinsPlain(eventId: string): { judgePin?: string; coordPin?: string } {
38   return loadJSON<{judgePin?:string; coordPin?:string}>(`ccr-evt:${eventId}:pins-plain`, {});
39 }

===== lib/events.ts =====
1 import { loadJSON, saveJSON } from "./storage";
2 import { sha256 } from "./pin";
3 
4 export type Event = { id: string; name: string; createdAt: number; archived?: boolean };
5 
6 const EVENTS_KEY = "ccr-events"; // Event[]
7 export function listEvents(): Event[] {
8   return loadJSON<Event[]>(EVENTS_KEY, []);
9 }
10 export function saveEvents(list: Event[]) {
11   saveJSON(EVENTS_KEY, list);
12 }
13 export function createEvent(name: string): Event {
14   const e: Event = { id: crypto.randomUUID(), name, createdAt: Date.now() };
15   const list = listEvents(); list.push(e); saveEvents(list); return e;
16 }
17 export function findEvent(eventId: string): Event|undefined {
18   return listEvents().find(e=>e.id===eventId);
19 }
20 
21 /** Procura o evento pelo PIN (juiz/coord): retorna {eventId, role} se bater */
22 export async function matchPinAcrossEvents(pin: string): Promise<{eventId:string, role:"judge"|"coord"}|null> {
23   const h = await sha256(pin.trim());
24   const events = listEvents();
25   for (const e of events) {
26     const pins = loadJSON<{judgeHash:string|null;coordHash:string|null}>(`ccr-evt:${e.id}:pins`, {judgeHash:null,coordHash:null});
27     if (pins.judgeHash === h) return { eventId: e.id, role: "judge" };
28     if (pins.coordHash  === h) return { eventId: e.id, role: "coord"  };
29   }
30   return null;
31 }
32 
33 /** Helpers de chaves por evento */
34 export function keyTeams(eventId:string){ return `ccr-evt:${eventId}:teams`; }
35 export function keyResults(eventId:string){ return `ccr-evt:${eventId}:results`; }

===== lib/ranking.ts =====
1 export type Run = { team: string; score: number; timeSec: number; at: number };
2 
3 export function compute(byTeam: Map<string, Run[]>) {
4   const out: Array<{
5     team: string; runs: Run[];
6     pickedIdx: number[]; rankingScore: number; tieTotal: number; tieTime: number;
7   }> = [];
8 
9   byTeam.forEach((arr, team) => {
10     const scores = arr.map(r=>r.score);
11     const times  = arr.map(r=>r.timeSec);
12     const idx = scores.map((_,i)=>i).sort((a,b)=>scores[b]-scores[a]).slice(0, Math.min(2, scores.length)).sort((a,b)=>a-b);
13     const rankingScore = idx.reduce((acc,i)=>acc+scores[i],0);
14     const tieTotal = scores.reduce((a,b)=>a+b,0);
15     const tieTime = idx.reduce((acc,i)=>acc+times[i],0);
16     out.push({ team, runs: arr, pickedIdx: idx, rankingScore, tieTotal, tieTime });
17   });
18 
19   out.sort((a,b)=>{
20     if (b.rankingScore!==a.rankingScore) return b.rankingScore-a.rankingScore;
21     if (b.tieTotal!==a.tieTotal) return b.tieTotal-a.tieTotal;
22     if (a.tieTime!==b.tieTime)   return a.tieTime-b.tieTime;
23     return a.team.localeCompare(b.team,"pt-BR");
24   });
25 
26   return out;
27 }

===== styles/globals.css =====
1 @tailwind base;
2 @tailwind components;
3 @tailwind utilities;
4 
5 :root { color-scheme: light; }
6 body { @apply bg-gray-100 text-gray-900; }
7 
8 .container-page { @apply max-w-6xl mx-auto p-4 md:p-6; }
9 .card { @apply bg-white rounded-2xl shadow-sm border border-gray-200; }
10 .grid-head { @apply text-xs font-semibold text-gray-600 uppercase tracking-wide; }
11 .badge { @apply inline-flex items-center px-2 py-0.5 text-xs rounded-md bg-gray-100 border border-gray-200; }
12 
13 /* ---- aparência de planilha ---- */
14 .sheet { @apply w-full overflow-auto; }
15 .sheet table { @apply w-full border-collapse; }
16 .sheet th, .sheet td { @apply border border-gray-300 text-center align-middle select-none; }
17 .sheet thead th { @apply bg-gray-50 text-gray-700 font-semibold text-sm; }
18 .sheet tfoot td, .sheet tfoot th { @apply bg-gray-50 font-semibold; }
19 .sheet .cell-btn { @apply w-full h-full px-2 py-2 text-sm transition; }
20 .sheet .is-on { @apply bg-emerald-600 text-white; }
21 .sheet .is-off { @apply bg-white hover:bg-gray-50; }
22 .sheet .disabled { @apply opacity-50 cursor-not-allowed hover:bg-white; }
23 
24 .summary { @apply text-lg font-semibold; }

===== tailwind.config.js =====
1 /** @type {import('tailwindcss').Config} */
2 export default {
3   content: ["./app/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}"],
4   theme: {
5     extend: {
6       fontFamily: { sans: ["ui-sans-serif", "system-ui", "Inter", "Arial", "sans-serif"] }
7     }
8   },
9   plugins: []
10 };

===== tsconfig.json =====
1 {
2   "compilerOptions": {
3     "target": "ES2022",
4     "lib": [
5       "ES2022",
6       "DOM",
7       "DOM.Iterable"
8     ],
9     "module": "ESNext",
10     "moduleResolution": "Bundler",
11     "jsx": "preserve",
12     "resolveJsonModule": true,
13     "isolatedModules": true,
14     "noEmit": true,
15     "strict": true,
16     "baseUrl": ".",
17     "paths": {
18       "@/*": [
19         "./*"
20       ]
21     },
22     "skipLibCheck": true,
23     "allowJs": true,
24     "incremental": true,
25     "esModuleInterop": true,
26     "plugins": [
27       {
28         "name": "next"
29       }
30     ]
31   },
32   "include": [
33     "**/*.ts",
34     "**/*.tsx",
35     "next-env.d.ts",
36     ".next/types/**/*.ts"
37   ],
38   "exclude": [
39     "node_modules"
40   ]
41 }

===== .env.example =====
1 DATABASE_URL="postgresql://user:password@host/dbname?sslmode=require&channel_binding=require"
2 DIRECT_URL="postgresql://user:password@host/dbname?sslmode=require&channel_binding=require"

===== scripts/db-check.mjs =====
1 import pg from "pg";
2 const { Client } = pg;
3 const url = process.env.DATABASE_URL;
4 if (!url) { console.error("DATABASE_URL não definida"); process.exit(1); }
5 const client = new Client({ connectionString: url, ssl: { rejectUnauthorized: false } });
6 try {
7   await client.connect();
8   const r = await client.query("select now() as now, current_database() as db");
9   console.log("✅ Conectado:", r.rows[0]);
10 } catch (e) {
11   console.error("❌ Falha ao conectar:", e.message);
12   process.exit(1);
13 } finally {
14   await client.end();
15 }

===== README.md =====
1 # CCR — Placar da Competição
2 Planilha interativa (Desafios, Marcadores, Mina) feita com Next.js 15 + React 19 + Tailwind.
3 - `pnpm dev` — roda local em http://localhost:3000
