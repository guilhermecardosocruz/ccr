
===== app/gestor/page.tsx =====
1 "use client";
2 
3 import RouteGuard from "@/components/RouteGuard";
4 import { useEffect, useState } from "react";
5 import { getSession, setSession } from "@/lib/session";
6 import Link from "next/link";
7 import { createEvent, listEvents, clearTeamsAndRuns } from "@/lib/events";
8 import { setEventPins } from "@/lib/pin";
9 
10 function genNumeric(n:number){ return Array.from({length:n},()=>Math.floor(Math.random()*10)).join(""); }
11 function genAlphaNum(n:number){ const cs="ABCDEFGHJKLMNPQRSTUVWXYZ23456789"; let o=""; for(let i=0;i<n;i++) o+=cs[Math.floor(Math.random()*cs.length)]; return o; }
12 
13 function Modal({open,onClose,title,children}:{open:boolean;onClose:()=>void;title?:string;children:React.ReactNode}) {
14   if(!open) return null;
15   return (
16     <div className="fixed inset-0 bg-black/40 z-50 flex items-center justify-center">
17       <div className="bg-white rounded-xl shadow-xl border w-full max-w-md p-5">
18         <div className="flex items-center justify-between mb-3">
19           <h3 className="text-lg font-semibold">{title}</h3>
20           <button onClick={onClose} className="px-2 py-1 border rounded-md">Fechar</button>
21         </div>
22         {children}
23       </div>
24     </div>
25   );
26 }
27 
28 export default function GestorPage() {
29   return (
30     <RouteGuard need="admin">
31       <GestorInner />
32     </RouteGuard>
33   );
34 }
35 
36 function GestorInner() {
37   const [events, setEvents] = useState<{id:string; name:string}[]>([]);
38   const [name, setName] = useState("");
39   const [showPinsOf, setShowPinsOf] = useState<string|null>(null);
40   const [plainPins, setPlainPins] = useState<{judgePin?:string; coordPin?:string}>({});
41 
42   async function refresh() {
43     const rows = await listEvents();
44     setEvents(rows);
45   }
46 
47   useEffect(()=>{ refresh(); }, []);
48 
49   async function addEvent() {
50     const n = name.trim(); if (!n) return;
51     const e = await createEvent(n);
52     setName(""); await refresh();
53     // gera PINs padrão (compatibilidade legado: cliente gera e envia)
54     const j = genNumeric(6), c = genAlphaNum(8);
55     await setEventPins(e.id, j, c);
56     setPlainPins({ judgePin: j, coordPin: c });
57     setShowPinsOf(e.id);
58   }
59 
60   function makeActive(id: string) {
61     const s = getSession();
62     setSession({ ...s, eventId: id });
63     alert("Evento ativo selecionado.");
64   }
65 
66   // Mostrar PINs agora sempre solicita PINs novos (rotate:true) para ter plaintext
67   async function showPins(id: string) {
68     try {
69       const res = await setEventPins(id, { rotate: true });
70       if (!res.ok) {
71         alert("Falha ao obter PINs: " + (res.error || "erro desconhecido"));
72         return;
73       }
74       setPlainPins(res.pins || {});
75       setShowPinsOf(id);
76     } catch (err) {
77       console.error("showPins error", err);
78       alert("Erro ao solicitar PINs.");
79     }
80   }
81 
82   async function rotatePins(id: string) {
83     const j = genNumeric(6), c = genAlphaNum(8);
84     await setEventPins(id, j, c);
85     setPlainPins({ judgePin: j, coordPin: c });
86     setShowPinsOf(id);
87   }
88 
89   async function resetData(id: string) {
90     if (!confirm("Limpar equipes e resultados deste evento?")) return;
91     await clearTeamsAndRuns(id);
92     alert("Dados limpos.");
93   }
94 
95   function copy(txt: string) {
96     navigator.clipboard.writeText(txt).then(()=>alert("Copiado!"));
97   }
98 
99   return (
100     <main className="container-page space-y-6">
101       <header className="card p-4">
102         <h1 className="text-lg font-semibold mb-2">Painel do Gestor</h1>
103         <div className="flex gap-2">
104           <input
105             value={name}
106             onChange={(e) => setName(e.target.value)}
107             className="border rounded-md px-3 py-2 w-full"
108             placeholder="Nome do evento"
109           />
110           <button onClick={addEvent} className="px-3 py-2 border rounded-md">Criar evento</button>
111         </div>
112       </header>
113 
114       <section className="card p-0 overflow-hidden">
115         <table className="w-full text-sm">
116           <thead className="bg-gray-50">
117             <tr>
118               <th className="text-left px-3 py-2">Evento</th>
119               <th className="px-3 py-2">PIN Juiz</th>
120               <th className="px-3 py-2">PIN Coord</th>
121               <th className="px-3 py-2">Ações</th>
122             </tr>
123           </thead>
124           <tbody>
125             {events.length === 0 ? (
126               <tr><td colSpan={4} className="px-3 py-6 text-center text-gray-500">Nenhum evento.</td></tr>
127             ) : events.map((e, i) => (
128               <tr key={e.id} className={i % 2 ? "bg-white" : "bg-gray-50/60"}>
129                 <td className="px-3 py-2">{e.name}</td>
130                 <td className="px-3 py-2">••••••</td>
131                 <td className="px-3 py-2">••••••••</td>
132                 <td className="px-3 py-2 flex flex-wrap gap-2">
133                   <button onClick={() => makeActive(e.id)} className="px-2 py-1 border rounded-md">Ativar evento</button>
134                   <Link href={`/planilha`} className="px-2 py-1 border rounded-md">Planilha</Link>
135                   <Link href={`/equipes`} className="px-2 py-1 border rounded-md">Equipes</Link>
136                   <Link href={`/coordenacao`} className="px-2 py-1 border rounded-md">Coordenação</Link>
137                   <Link href={`/resultado`} className="px-2 py-1 border rounded-md">Resultado</Link>  {/* Adicionado Resultado */}
138                   <button onClick={() => showPins(e.id)} className="px-2 py-1 border rounded-md">Mostrar PINs</button>
139                   <button onClick={() => rotatePins(e.id)} className="px-2 py-1 border rounded-md">Rotacionar PINs</button>
140                   <button onClick={() => resetData(e.id)} className="px-2 py-1 border rounded-md">Limpar dados</button>
141                 </td>
142               </tr>
143             ))}
144           </tbody>
145         </table>
146       </section>
147 
148       <Modal
149         open={!!showPinsOf}
150         onClose={() => setShowPinsOf(null)}
151         title="PINs do evento"
152       >
153         {showPinsOf && (
154           <div className="space-y-3">
155             <div className="flex items-center justify-between gap-3">
156               <div>
157                 <div className="text-sm text-gray-600">PIN Juiz</div>
158                 <div className="text-xl font-semibold">{plainPins.judgePin ?? "—"}</div>
159               </div>
160               {plainPins.judgePin && <button onClick={() => copy(plainPins.judgePin!)} className="px-2 py-1 border rounded-md">Copiar</button>}
161             </div>
162             <div className="flex items-center justify-between gap-3">
163               <div>
164                 <div className="text-sm text-gray-600">PIN Coordenação</div>
165                 <div className="text-xl font-semibold">{plainPins.coordPin ?? "—"}</div>
166               </div>
167               {plainPins.coordPin && <button onClick={() => copy(plainPins.coordPin!)} className="px-2 py-1 border rounded-md">Copiar</button>}
168             </div>
169             <p className="text-xs text-gray-500">Obs.: por segurança, o servidor armazena apenas hashes; ao solicitar, geramos novos PINs para exibir.</p>
170           </div>
171         )}
172       </Modal>
173     </main>
174   );
175 }

===== components/RouteGuard.tsx =====
1 "use client";
2 
3 import { useEffect, useState } from "react";
4 import { getSession } from "@/lib/session";
5 import { useRouter } from "next/navigation";
6 
7 export default function RouteGuard({ need, needEvent = false, children }:{
8   need: "any"|"admin"|"judge"|"coord"|"judge_or_coord",
9   needEvent?: boolean,
10   children: React.ReactNode
11 }) {
12   const router = useRouter();
13   const [ok, setOk] = useState(false);
14 
15   useEffect(()=>{
16     const s = getSession();
17     if (!s.authed || !s.role) {
18       router.replace("/login");
19       return;
20     }
21 
22     // Redirecionamento para o Gestor caso não tenha permissão
23     if (need !== "any" && s.role !== need) {
24       if (s.role === "admin") {
25         router.replace("/gestor");
26       } else if (s.role === "judge" || s.role === "coord") {
27         router.replace("/planilha"); // Redireciona para planilha se for juiz ou coordenador
28       }
29       return;
30     }
31 
32     // Verificação de evento
33     if (needEvent && !s.eventId) {
34       router.replace("/gestor");
35       return;
36     }
37 
38     setOk(true);
39   }, [router, need, needEvent]);
40 
41   if (!ok) return null;
42   return <>{children}</>;
43 }

===== lib/session.ts =====
1 import { loadJSON, saveJSON, removeKey } from "./storage";
2 
3 export type Role = "admin"|"judge"|"coord";
4 export type Session = {
5   authed: boolean;
6   role: Role|null;
7   pin: string|null;       // PIN digitado (admin ou do evento)
8   eventId: string|null;   // evento ativo (admin pode alternar)
9 };
10 const KEY = "ccr-session";
11 
12 export function getSession(): Session {
13   return loadJSON<Session>(KEY, { authed:false, role:null, pin:null, eventId:null });
14 }
15 
16 export function setSession(s: Session) { 
17   saveJSON(KEY, s); 
18 }
19 
20 export function clearSession() { 
21   removeKey(KEY); 
22 }
23 
24 export function requireEventId(): string|null {
25   const s = getSession(); 
26   return s.eventId;
27 }

===== lib/events.ts =====
1 export type Event = { id: string; name: string; createdAt: string; archived: boolean };
2 
3 export async function listEvents(): Promise<Event[]> {
4   const r = await fetch("/api/events", { cache: "no-store" });
5   return r.json();
6 }
7 
8 export async function createEvent(name: string): Promise<Event> {
9   const r = await fetch("/api/events", {
10     method: "POST",
11     headers: { "content-type":"application/json" },
12     body: JSON.stringify({ name })
13   });
14   const j = await r.json();
15   if (!r.ok || !j?.ok) throw new Error(j?.error || "create_event_failed");
16   return j.event as Event;
17 }
18 
19 export async function listTeams(eventId: string): Promise<{id:string; name:string}[]> {
20   const r = await fetch(`/api/events/${eventId}/teams`, { cache: "no-store" });
21   return r.json();
22 }
23 
24 export async function addTeam(eventId: string, name: string) {
25   const r = await fetch(`/api/events/${eventId}/teams`, {
26     method: "POST",
27     headers: { "content-type":"application/json" },
28     body: JSON.stringify({ name })
29   });
30   if (!r.ok) throw new Error("add_team_failed");
31 }
32 
33 export async function renameTeam(eventId: string, oldName: string, newName: string) {
34   const r = await fetch(`/api/events/${eventId}/teams`, {
35     method: "PUT",
36     headers: { "content-type":"application/json" },
37     body: JSON.stringify({ oldName, newName })
38   });
39   if (!r.ok) throw new Error("rename_team_failed");
40 }
41 
42 export async function deleteTeam(eventId: string, name: string) {
43   const r = await fetch(`/api/events/${eventId}/teams`, {
44     method: "DELETE",
45     headers: { "content-type":"application/json" },
46     body: JSON.stringify({ name })
47   });
48   if (!r.ok) throw new Error("delete_team_failed");
49 }
50 
51 export async function clearTeamsAndRuns(eventId: string) {
52   const r = await fetch(`/api/events/${eventId}/teams`, {
53     method: "DELETE",
54     headers: { "content-type":"application/json" },
55     body: JSON.stringify({})
56   });
57   if (!r.ok) throw new Error("clear_event_failed");
58 }
59 
60 export type Run = { team: string; score: number; timeSec: number; at: number };
61 
62 export async function listRuns(eventId: string): Promise<Run[]> {
63   const r = await fetch(`/api/events/${eventId}/runs`, { cache: "no-store" });
64   const data = await r.json();
65   // API já retorna Run[]; garantimos types coerentes:
66   return (Array.isArray(data) ? data : []) as Run[];
67 }
68 
69 export async function addRun(eventId: string, teamName: string, score: number, timeSec: number, notes?: string) {
70   const r = await fetch(`/api/events/${eventId}/runs`, {
71     method: "POST",
72     headers: { "content-type":"application/json" },
73     body: JSON.stringify({ teamName, score, timeSec, notes })
74   });
75   const j = await r.json().catch(()=> ({}));
76   if (!r.ok || j?.ok === false) throw new Error(j?.error || "add_run_failed");
77 }
78 
79 export async function clearRuns(eventId: string) {
80   const r = await fetch(`/api/events/${eventId}/runs`, { method: "DELETE" });
81   if (!r.ok) throw new Error("clear_runs_failed");
82 }

===== lib/storage.ts =====
1 export function loadJSON<T>(key: string, fallback: T): T {
2   if (typeof window === "undefined") return fallback;
3   try { const raw = localStorage.getItem(key); return raw ? JSON.parse(raw) as T : fallback; }
4   catch { return fallback; }
5 }
6 export function saveJSON<T>(key: string, value: T) {
7   if (typeof window === "undefined") return;
8   localStorage.setItem(key, JSON.stringify(value));
9 }
10 export function removeKey(key: string) {
11   if (typeof window === "undefined") return;
12   localStorage.removeItem(key);
13 }

===== app/planilha/page.tsx =====
1 "use client";
2 
3 import RouteGuard from "@/components/RouteGuard";
4 import { useEffect, useMemo, useState } from "react";
5 import { getSession } from "@/lib/session";
6 import { listTeams, addRun } from "@/lib/events";
7 
8 const MARKERS = [1, 2] as const;
9 const ATTEMPTS = [1, 2, 3] as const;
10 
11 type Marker = (typeof MARKERS)[number];   
12 type Attempt = (typeof ATTEMPTS)[number]; 
13 
14 const DESAFIOS: Record<string, { title: string; points: number; rows: number }> = {
15   lombadas: { title: "Lombadas (15)", points: 15, rows: 5 },
16   gap: { title: "Gap (15)", points: 15, rows: 5 },
17   obstaculo: { title: "Obstáculo (20)", points: 20, rows: 5 },
18 };
19 
20 export default function Page() {
21   return (
22     <RouteGuard need="judge_or_coord" needEvent>
23       <Planilha />
24     </RouteGuard>
25   );
26 }
27 
28 function Planilha() {
29   const sess = getSession();
30   const eventId = sess.eventId!;
31   
32   const [teams, setTeams] = useState<{ id: string; name: string }[]>([]);
33   const [selected, setSelected] = useState("");
34 
35   useEffect(() => {
36     listTeams(eventId).then(setTeams);
37   }, [eventId]);
38 
39   const [durationMin, setDurationMin] = useState(5);
40   const [timeLeft, setTimeLeft] = useState(durationMin * 60);
41   const [running, setRunning] = useState(false);
42 
43   useEffect(() => {
44     if (!running) setTimeLeft(durationMin * 60);
45   }, [durationMin, running]);
46 
47   const startPause = () => {
48     if (!selected) return;
49     if (timeLeft <= 0) setTimeLeft(durationMin * 60);
50     setRunning((r) => !r);
51   };
52 
53   const penalty = () => running && selected && setTimeLeft((t) => Math.max(0, t - 60));
54 
55   const canStart = !!selected || running;
56   const resetAll = () => {
57     setSelected("");
58     setTimeLeft(durationMin * 60);
59     setRunning(false);
60   };
61 
62   return (
63     <div className="planilha-container">
64       {/* Your Planilha UI */}
65     </div>
66   );
67 }

===== app/coordenacao/page.tsx =====
1 "use client";
2 
3 import RouteGuard from "@/components/RouteGuard";
4 import { useEffect, useState } from "react";
5 import { getSession } from "@/lib/session";
6 import { listTeams, addTeam, renameTeam, deleteTeam } from "@/lib/events";
7 
8 export default function Page() {
9   return (
10     <RouteGuard need="coord" needEvent>
11       <Inner />
12     </RouteGuard>
13   );
14 }
15 
16 function Inner() {
17   const sess = getSession();
18   const eventId = sess.eventId!;
19 
20   const [teams, setTeams] = useState<{ id: string; name: string }[]>([]);
21   const [name, setName] = useState("");
22   const [edit, setEdit] = useState<number | null>(null);
23   const [val, setVal] = useState("");
24 
25   async function refresh() {
26     const rows = await listTeams(eventId);
27     setTeams(rows);
28   }
29 
30   useEffect(() => {
31     refresh();
32   }, [eventId]);
33 
34   async function add() {
35     const n = name.trim();
36     if (!n || teams.some((t) => t.name === n)) return;
37     await addTeam(eventId, n);
38     setName(""); 
39     await refresh();
40   }
41 
42   async function rm(i: number) {
43     await deleteTeam(eventId, teams[i].name);
44     await refresh();
45   }
46 
47   function start(i: number) {
48     setEdit(i);
49     setVal(teams[i].name);
50   }
51 
52   async function save() {
53     if (edit === null) return;
54     const v = val.trim();
55     if (!v) return;
56     await renameTeam(eventId, teams[edit].name, v);
57     setEdit(null);
58     setVal("");
59     await refresh();
60   }
61 
62   return (
63     <main className="container-page space-y-6">
64       <header className="card p-4">
65         <h1 className="text-lg font-semibold mb-2">Equipes</h1>
66         <div className="flex gap-2">
67           <input
68             value={name}
69             onChange={(e) => setName(e.target.value)}
70             className="border rounded-md px-3 py-2 w-full"
71             placeholder="Nome da equipe"
72           />
73           <button onClick={add} className="px-3 py-2 border rounded-md">
74             Adicionar
75           </button>
76         </div>
77       </header>
78       <section className="card p-0 overflow-hidden">
79         <table className="w-full text-sm">
80           <thead className="bg-gray-50">
81             <tr>
82               <th className="text-left px-3 py-2">Equipe</th>
83               <th className="w-40 px-3 py-2">Ações</th>
84             </tr>
85           </thead>
86           <tbody>
87             {teams.length === 0 ? (
88               <tr>
89                 <td colSpan={2} className="px-3 py-6 text-center text-gray-500">
90                   Nenhuma equipe.
91                 </td>
92               </tr>
93             ) : (
94               teams.map((t, i) => (
95                 <tr key={t.id} className={i % 2 ? "bg-white" : "bg-gray-50/60"}>
96                   <td className="px-3 py-2">
97                     {edit === i ? (
98                       <input
99                         value={val}
100                         onChange={(e) => setVal(e.target.value)}
101                         className="border rounded-md px-2 py-1 w-full"
102                       />
103                     ) : (
104                       t.name
105                     )}
106                   </td>
107                   <td className="px-3 py-2 flex gap-2">
108                     {edit === i ? (
109                       <>
110                         <button onClick={save} className="px-2 py-1 border rounded-md">
111                           Salvar
112                         </button>
113                         <button
114                           onClick={() => {
115                             setEdit(null);
116                             setVal("");
117                           }}
118                           className="px-2 py-1 border rounded-md"
119                         >
120                           Cancelar
121                         </button>
122                       </>
123                     ) : (
124                       <>
125                         <button
126                           onClick={() => start(i)}
127                           className="px-2 py-1 border rounded-md"
128                         >
129                           Editar
130                         </button>
131                         <button
132                           onClick={() => rm(i)}
133                           className="px-2 py-1 border rounded-md"
134                         >
135                           Excluir
136                         </button>
137                       </>
138                     )}
139                   </td>
140                 </tr>
141               ))
142             )}
143           </tbody>
144         </table>
145       </section>
146     </main>
147   );
148 }

===== app/equipes/page.tsx =====
1 "use client";
2 
3 import RouteGuard from "@/components/RouteGuard";
4 import { useEffect, useState } from "react";
5 import { getSession } from "@/lib/session";
6 import { listTeams, addTeam, renameTeam, deleteTeam } from "@/lib/events";
7 
8 export default function Page(){
9   return (
10     <RouteGuard need="coord" needEvent>
11       <Inner />
12     </RouteGuard>
13   );
14 }
15 
16 function Inner(){
17   const sess = getSession();
18   const eventId = sess.eventId!;
19 
20   const [teams,setTeams]=useState<{id:string; name:string}[]>([]);
21   const [name,setName]=useState("");
22   const [edit,setEdit]=useState<number|null>(null);
23   const [val,setVal]=useState("");
24 
25   async function refresh() {
26     const rows = await listTeams(eventId);
27     setTeams(rows);
28   }
29 
30   useEffect(()=>{ refresh(); },[eventId]);
31 
32   async function add(){
33     const n=name.trim(); if(!n || teams.some(t=>t.name===n)) return;
34     await addTeam(eventId, n);
35     setName(""); await refresh();
36   }
37   async function rm(i:number){
38     await deleteTeam(eventId, teams[i].name);
39     await refresh();
40   }
41   function start(i:number){ setEdit(i); setVal(teams[i].name); }
42   async function save(){
43     if(edit===null) return; const v=val.trim(); if(!v) return;
44     await renameTeam(eventId, teams[edit].name, v);
45     setEdit(null); setVal(""); await refresh();
46   }
47 
48   return (
49     <main className="container-page space-y-6">
50       <header className="card p-4">
51         <h1 className="text-lg font-semibold mb-2">Equipes</h1>
52         <div className="flex gap-2">
53           <input value={name} onChange={e=>setName(e.target.value)} className="border rounded-md px-3 py-2 w-full" placeholder="Nome da equipe" />
54           <button onClick={add} className="px-3 py-2 border rounded-md">Adicionar</button>
55         </div>
56       </header>
57       <section className="card p-0 overflow-hidden">
58         <table className="w-full text-sm">
59           <thead className="bg-gray-50"><tr><th className="text-left px-3 py-2">Equipe</th><th className="w-40 px-3 py-2">Ações</th></tr></thead>
60           <tbody>
61             {teams.length===0 ? <tr><td colSpan={2} className="px-3 py-6 text-center text-gray-500">Nenhuma equipe.</td></tr> :
62             teams.map((t,i)=>(
63               <tr key={t.id} className={i%2?"bg-white":"bg-gray-50/60"}>
64                 <td className="px-3 py-2">{edit===i? <input value={val} onChange={e=>setVal(e.target.value)} className="border rounded-md px-2 py-1 w-full" /> : t.name}</td>
65                 <td className="px-3 py-2 flex gap-2">{edit===i ? (<><button onClick={save} className="px-2 py-1 border rounded-md">Salvar</button><button onClick={()=>{setEdit(null);setVal("");}} className="px-2 py-1 border rounded-md">Cancelar</button></>) : (<><button onClick={()=>start(i)} className="px-2 py-1 border rounded-md">Editar</button><button onClick={()=>rm(i)} className="px-2 py-1 border rounded-md">Excluir</button></>)}</td>
66               </tr>
67             ))}
68           </tbody>
69         </table>
70       </section>
71     </main>
72   );
73 }

===== app/layout.tsx =====
1 export const metadata = { title: "CCR • Placar", description: "Planilha interativa de pontuação" };
2 import "./../styles/globals.css";
3 import AppMenu from "@/components/AppMenu";
4 
5 export default function RootLayout({ children }: { children: React.ReactNode }) {
6   return (
7     <html lang="pt-BR">
8       <body>
9         <AppMenu />
10         {children}
11       </body>
12     </html>
13   );
14 }

===== app/(auth)/layout.tsx =====
1 import "@/styles/globals.css";
2 import AppMenu from "@/components/AppMenu";
3 
4 export const metadata = {
5   title: "CCR • Login",
6   description: "Login do painel CCR",
7 };
8 
9 export default function AuthLayout({ children }: { children: React.ReactNode }) {
10   return (
11     <html lang="pt-BR">
12       <body className="bg-gray-50 min-h-screen flex flex-col">
13         <AppMenu />
14         <main className="flex-1 flex items-center justify-center">{children}</main>
15       </body>
16     </html>
17   );
18 }

===== components/AppMenu.tsx =====
1 "use client";
2 
3 import Link from "next/link";
4 import { useEffect, useState } from "react";
5 import { clearSession, getSession } from "@/lib/session";
6 import { useRouter } from "next/navigation";
7 import { listEvents } from "@/lib/events";
8 
9 export default function AppMenu() {
10   const router = useRouter();
11   const [ready, setReady] = useState(false);
12   const [authed, setAuthed] = useState(false);
13   const [role, setRole] = useState<"admin" | "judge" | "coord" | null>(null);
14   const [eventId, setEventId] = useState<string | null>(null);
15   const [eventName, setEventName] = useState<string>("");
16 
17   useEffect(() => {
18     const s = getSession();
19     setAuthed(!!s.authed && !!s.role);
20     setRole(s.role);
21     setEventId(s.eventId);
22     setReady(true);
23 
24     async function loadEvent() {
25       if (s.eventId) {
26         try {
27           const events = await listEvents();
28           const ev = events.find((e) => e.id === s.eventId);
29           setEventName(ev?.name || "");
30         } catch (err) {
31           console.error("Erro ao carregar eventos:", err);
32         }
33       }
34     }
35     loadEvent();
36   }, []);
37 
38   function onLogout() {
39     clearSession();
40     router.replace("/login");
41   }
42 
43   return (
44     <nav className="w-full border-b bg-white">
45       <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between gap-4">
46         <div className="font-semibold">CCR • Placar</div>
47 
48         {!ready ? (
49           <div className="h-6 w-40 rounded bg-gray-200 animate-pulse" />
50         ) : (
51           <div className="flex items-center gap-4 text-sm">
52             {authed ? (
53               <>
54                 {role === "admin" ? (
55                   <>
56                     <Link href="/gestor" className="hover:underline">Gestor</Link>
57                     {!!eventId && (
58                       <>
59                         <span className="text-gray-500 truncate max-w-[14rem]" title={eventName || eventId}>
60                           Evento: {eventName || eventId}
61                         </span>
62                         <Link href="/planilha" className="hover:underline">Planilha</Link>
63                         <Link href="/equipes" className="hover:underline">Equipes</Link>
64                         <Link href="/resultado" className="hover:underline">Resultado</Link>
65                         <Link href="/coordenacao" className="hover:underline">Coordenação</Link>
66                       </>
67                     )}
68                   </>
69                 ) : (
70                   <>
71                     <Link href="/planilha" className="hover:underline">Planilha</Link>
72                     <Link href="/equipes" className="hover:underline">Equipes</Link>
73                     <Link href="/resultado" className="hover:underline">Resultado</Link>
74                     <Link href="/coordenacao" className="hover:underline">Coordenação</Link>
75                   </>
76                 )}
77 
78                 {/* Sair: somente quando logado */}
79                 <button
80                   onClick={onLogout}
81                   className="px-2 py-1 border rounded-md"
82                   title="Encerrar sessão"
83                 >
84                   Sair
85                 </button>
86               </>
87             ) : (
88               // Não logado: sem botão Sair, só o atalho de Login
89               <Link href="/login" className="hover:underline">Login</Link>
90             )}
91           </div>
92         )}
93       </div>
94     </nav>
95   );
96 }

===== app/api/pin-login/route.ts =====
1 import prisma from "@/lib/prisma";
2 import { sha256Hex } from "@/lib/crypto";
3 import { normalizePin } from "@/lib/pin";
4 
5 export const runtime = "nodejs";
6 export const dynamic = "force-dynamic";
7 
8 export async function POST(req: Request) {
9   try {
10     const { pin } = await req.json();
11     const raw = String(pin ?? "");
12     const p = normalizePin(raw);
13     if (!p) {
14       return new Response(JSON.stringify({ ok: false, error: "missing_pin" }), { status: 400 });
15     }
16 
17     // 1) PIN Mestre por ENV (plaintext, normalizado)
18     const envMaster = normalizePin(process.env.ADMIN_MASTER_PIN || "");
19     if (envMaster && p === envMaster) {
20       return Response.json({ ok: true, role: "admin", eventId: null });
21     }
22 
23     // 2) Admin hash salvo no banco — compara como HEX (a partir de p normalizado)
24     const hashHex = sha256Hex(p);
25     const admin = await prisma.appSetting.findUnique({ where: { key: "admin_pin_hash" } });
26     if (admin?.value && admin.value === hashHex) {
27       return Response.json({ ok: true, role: "admin", eventId: null });
28     }
29 
30     // 3) PINs de evento (juiz/coord) — compara como HEX
31     const pinsList = await prisma.eventPins.findMany({
32       select: { eventId: true, judgeHash: true, coordHash: true },
33     });
34     for (const row of pinsList) {
35       if (row.judgeHash && row.judgeHash === hashHex) {
36         return Response.json({ ok: true, role: "judge", eventId: row.eventId });
37       }
38       if (row.coordHash && row.coordHash === hashHex) {
39         return Response.json({ ok: true, role: "coord", eventId: row.eventId });
40       }
41     }
42 
43     return new Response(JSON.stringify({ ok: false, error: "invalid_pin" }), { status: 401 });
44   } catch (e) {
45     console.error("pin-login error:", e);
46     return new Response(JSON.stringify({ ok: false, error: "bad_request" }), { status: 400 });
47   }
48 }
